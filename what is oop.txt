	What is OOP?
o	Object-oriented programming is based on the concept of objects.
		In object-oriented programming data structures, or objects are defined, each with its own properties or attributes.
		Each object can also contain its own procedures or methods. Software is designed by using objects that interact with one another.

	Concepts of object oriented programming.
o	Objects
o	Classes
o	Inheritance
o	Data Abstraction
o	Data Encapsulation
o	Polymorphism
o	Overloading
o	Reusability

	Objects:
	o	is the basic unit of object-oriented programming. Objects are identified by its unique name. An object represents a particular instance of a 	class. There can be more than one instance of a class. Each instance of a class can holds its own relevant data.
	An Object is a collection of data members and associated member functions also known as methods.

	Classes:
o	Classes are data types based on which objects are created. Objects with similar properties and methods are grouped together to form a Class. Thus, a Class represents a set of individual objects. Characteristics of an object are represented in a class as Properties. The actions that can be performed by objects become functions of the class and are referred to as Methods. For example, consider we have a Class of Cars under which Santro Xing, Alto and WaganR represents individual Objects. In this context each Car Object will have its own, Model, Year of Manufacture, Color, Top Speed, Engine Power etc., which form Properties of the Car class and the associated actions i.e., object functions like Start, Move, and Stop form the Methods of Car Class. No memory is allocated when a class is created. Memory is allocated only when an object is created, i.e., when an instance of a class is created.

	Inheritance:
o	Inheritance is the process of forming a new class from an existing class or base class. The base class is also known as parent class or super class. The new class that is formed is called derivedclass. Derived class is also known as a child class or sub class. Inheritance helps in reducing the overall code size of the program, which is an important concept in object-oriented programming.

	Data Abstraction:
o	Data Abstraction increases the power of programming language by creating user defined data types. Data Abstraction also represents the needed information in the program without presenting the details.

	Data Encapsulation:
	Data Encapsulation combines data and functions into a single unit called Class. When using Data Encapsulation, data is not accessed directly; it is only accessible through the functions present inside the class. Data Encapsulation enables the important concept of data hiding possible.

	Polymorphism:
	Polymorphism allows routines to use variables of different types at different times. An operator or function can be given different meanings or functions. Polymorphism refers to a single function or multi-functioning operator performing in different ways.

	Overloading:
	Overloading is one type of Polymorphism. It allows an object to have different meanings, depending on its context. When an existing operator or function begins to operate on new data type, or class, it is understood to be overloaded.

	Reusability:
	This term refers to the ability for multiple programmers to use the same written and debugged existing class of data. This is a time saving device and adds code efficiency to the language. Additionally, the programmer can incorporate new features to the existing class, further developing the application and allowing users to achieve increased performance. This time saving feature optimizes code, helps in gaining secured applications and facilitates easier maintenance on the application.











